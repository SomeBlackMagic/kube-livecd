name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-base:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build base OS
        run: bash build-base-os.sh

      - name: Upload kernel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: kernel/out/
          retention-days: 1

      - name: Upload rootfs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rootfs-artifacts
          path: rootfs/out/
          retention-days: 1

  build-k8s:
    needs: build-base
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s_version: ['1.24', '1.25', '1.26', '1.27', '1.28', '1.29', '1.30', '1.31', '1.32', '1.33']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download kernel artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-artifacts
          path: kernel/out/

      - name: Download rootfs artifacts
        uses: actions/download-artifact@v4
        with:
          name: rootfs-artifacts
          path: rootfs/out/

      - name: Get latest patch version for k8s ${{ matrix.k8s_version }}
        id: k8s_version
        run: |
          MAJOR_MINOR="${{ matrix.k8s_version }}"
          LATEST=$(curl -sL "https://dl.k8s.io/release/stable-${MAJOR_MINOR}.txt" || echo "")

          if [ -z "$LATEST" ] || [ "$LATEST" = "<?xml"* ]; then
            # Fallback: get all releases and filter by version
            LATEST=$(curl -sL https://api.github.com/repos/kubernetes/kubernetes/releases | \
              jq -r '.[].tag_name' | \
              grep "^v${MAJOR_MINOR}\." | \
              head -n 1)
          fi

          echo "version=${LATEST}" >> $GITHUB_OUTPUT
          echo "version_short=${LATEST#v}" >> $GITHUB_OUTPUT

      - name: Build with Kubernetes ${{ steps.k8s_version.outputs.version }}
        run: |
          bash build-k8s.sh ${{ steps.k8s_version.outputs.version }}

      - name: Rename artifact
        run: |
          mv livecd/out/node.iso node-k8s-${{ steps.k8s_version.outputs.version_short }}.iso

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-k8s-${{ steps.k8s_version.outputs.version_short }}
          path: node-k8s-${{ steps.k8s_version.outputs.version_short }}.iso
          retention-days: 1

  release:
    needs: build-k8s
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir -p release
          find artifacts -name "*.iso" -exec cp {} release/ \;
          ls -lh release/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*.iso
          generate_release_notes: true
